}
# Simulacija dolaska pacijenata (Poissonov proces)
arrival_rate <- function() rexp(1, rate = 1/(1440 / sample(350:550, 1)))  # 350-550 pacijenata dnevno
# Kreiranje okoline
hospital <- simmer("Hitni prijem")
# Proces pacijenta
patient_trajectory <- trajectory("Pacijent") %>%
seize("trijaža") %>%
timeout(triage_time) %>%
release("trijaža") %>%
set_attribute("category", function() generate_patient()) %>%
select(function(attrs) {
category <- attrs[["category"]]
return(service_times[[category]]())
}) %>%
seize("doktor", priority = function(attrs) {
category <- attrs[["category"]]
return(match(category, rev(patient_categories)))  # Veći prioritet za hitnije pacijente
}) %>%
timeout(function(attrs) {
category <- attrs[["category"]]
return(service_times[[category]]())
}) %>%
release("doktor")
# Dodajemo resurse (trijaža i doktori)
hospital %>%
add_resource("trijaža", capacity = 3) %>%  # 3 trijažna radnika
add_resource("doktor", capacity = num_doctors) %>%  # 32 doktora
add_generator("Pacijent", patient_trajectory, arrival_rate)
# Pokrećemo simulaciju na 7 dana
hospital %>%
run(until = 7 * 1440) %>%
print()
library(simmer)
library(simmer.plot)
# Definiramo globalne varijable
set.seed(123)
# Broj doktora
num_doctors <- 32
# Distribucija pacijenata po kategorijama
patient_categories <- c("Crveni", "Žuti", "Zeleni", "Plavi")
category_probs <- c(0.05, 0.20, 0.50, 0.25)  # Vjerojatnosti za svaku kategoriju
# Vrijeme trijaže (u minutama, eksponencijalna distribucija)
triage_time <- function() rexp(1, rate = 1/5)  # Prosječno 5 min
# Vrijeme obrade kod doktora po kategoriji (u minutama, eksponencijalna distribucija)
service_times <- list(
"Crveni" = function() rexp(1, rate = 1/30),  # Prosječno 30 min
"Žuti" = function() rexp(1, rate = 1/20),   # Prosječno 20 min
"Zeleni" = function() rexp(1, rate = 1/10),  # Prosječno 10 min
"Plavi" = function() rexp(1, rate = 1/5)    # Prosječno 5 min
)
# Funkcija koja generira indeks pacijenta s kategorijom
generate_patient_index <- function() {
sample(1:4, size = 1, prob = category_probs)  # 1 = Crveni, 2 = Žuti, 3 = Zeleni, 4 = Plavi
}
# Simulacija dolaska pacijenata (Poissonov proces)
arrival_rate <- function() rexp(1, rate = 1/(1440 / sample(350:550, 1)))  # 350-550 pacijenata dnevno
# Kreiranje okoline
hospital <- simmer("Hitni prijem")
# Proces pacijenta
patient_trajectory <- trajectory("Pacijent") %>%
seize("trijaža") %>%
timeout(triage_time) %>%
release("trijaža") %>%
set_attribute("category", function() generate_patient_index()) %>%
seize("doktor", priority = function(attrs) {
return(5 - attrs[["category"]])  # Crveni (1) ima prioritet 4, Plavi (4) ima prioritet 1
}) %>%
timeout(function(attrs) {
category <- attrs[["category"]]
return(service_times[[patient_categories[category]]]() )
}) %>%
release("doktor")
# Dodajemo resurse (trijaža i doktori)
hospital %>%
add_resource("trijaža", capacity = 3) %>%  # 3 trijažna radnika
add_resource("doktor", capacity = num_doctors) %>%  # 32 doktora
add_generator("Pacijent", patient_trajectory, arrival_rate)
# Pokrećemo simulaciju na 7 dana
hospital %>%
run(until = 7 * 1440) %>%
print()
library(simmer)
library(simmer.plot)
# Definiramo globalne varijable
set.seed(123)
# Broj doktora
num_doctors <- 32
# Distribucija pacijenata po kategorijama
patient_categories <- c("Crveni", "Žuti", "Zeleni", "Plavi")
category_probs <- c(0.05, 0.20, 0.50, 0.25)  # Vjerojatnosti za svaku kategoriju
# Vrijeme trijaže (u minutama, eksponencijalna distribucija)
triage_time <- function() rexp(1, rate = 1/5)  # Prosječno 5 min
# Vrijeme obrade kod doktora po kategoriji (u minutama, eksponencijalna distribucija)
service_times <- list(
"Crveni" = function() rexp(1, rate = 1/30),  # Prosječno 30 min
"Žuti" = function() rexp(1, rate = 1/20),    # Prosječno 20 min
"Zeleni" = function() rexp(1, rate = 1/10),  # Prosječno 10 min
"Plavi" = function() rexp(1, rate = 1/5)     # Prosječno 5 min
)
# Funkcija koja generira indeks pacijenta s kategorijom
generate_patient_index <- function() {
sample(1:4, size = 1, prob = category_probs)  # 1 = Crveni, 2 = Žuti, 3 = Zeleni, 4 = Plavi
}
# Simulacija dolaska pacijenata (Poissonov proces)
arrival_rate <- function() rexp(1, rate = 1/(1440 / sample(350:550, 1)))  # 350-550 pacijenata dnevno
# Kreiranje okoline
hospital <- simmer("Hitni prijem")
# Proces pacijenta
patient_trajectory <- trajectory("Pacijent") %>%
seize("trijaža") %>%
timeout(triage_time) %>%
release("trijaža") %>%
set_attribute("category", function() generate_patient_index()) %>%
seize("doktor", priority = function() {
function(attrs) {
return(5 - attrs[["category"]])  # Crveni (1) ima prioritet 4, Plavi (4) ima prioritet 1
}
}) %>%
timeout(function() {
function(attrs) {
category <- attrs[["category"]]
return(service_times[[patient_categories[category]]]() )
}
}) %>%
release("doktor")
# Dodajemo resurse (trijaža i doktori)
hospital %>%
add_resource("trijaža", capacity = 3) %>%  # 3 trijažna radnika
add_resource("doktor", capacity = num_doctors) %>%  # 32 doktora
add_generator("Pacijent", patient_trajectory, arrival_rate)
# Pokrećemo simulaciju na 7 dana
hospital %>%
run(until = 7 * 1440) %>%
print()
library(simmer)
library(simmer.plot)
# Definiramo globalne varijable
set.seed(123)
# Broj doktora
num_doctors <- 32
# Distribucija pacijenata po kategorijama
patient_categories <- c("Crveni", "Žuti", "Zeleni", "Plavi")
category_probs <- c(0.05, 0.20, 0.50, 0.25)  # Vjerojatnosti za svaku kategoriju
# Vrijeme trijaže (u minutama, eksponencijalna distribucija)
triage_time <- function() rexp(1, rate = 1/5)  # Prosječno 5 min
# Vrijeme obrade kod doktora po kategoriji (u minutama, eksponencijalna distribucija)
service_times <- list(
"Crveni" = function() rexp(1, rate = 1/30),  # Prosječno 30 min
"Žuti" = function() rexp(1, rate = 1/20),    # Prosječno 20 min
"Zeleni" = function() rexp(1, rate = 1/10),  # Prosječno 10 min
"Plavi" = function() rexp(1, rate = 1/5)     # Prosječno 5 min
)
# Funkcija koja generira indeks pacijenta s kategorijom
generate_patient_index <- function() {
sample(1:4, size = 1, prob = category_probs)  # 1 = Crveni, 2 = Žuti, 3 = Zeleni, 4 = Plavi
}
# Simulacija dolaska pacijenata (Poissonov proces)
arrival_rate <- function() rexp(1, rate = 1/(1440 / sample(350:550, 1)))  # 350-550 pacijenata dnevno
# Kreiranje okoline
hospital <- simmer("Hitni prijem")
# Proces pacijenta
patient_trajectory <- trajectory("Pacijent") %>%
seize("trijaža") %>%
timeout(triage_time) %>%
release("trijaža") %>%
set_attribute("category", function() generate_patient_index()) %>%
seize("doktor", priority = function(attrs) {
return(5 - attrs[["category"]])  # Crveni (1) ima prioritet 4, Plavi (4) ima prioritet 1
}
}) %>%
library(simmer)
library(simmer.plot)
# Definiramo globalne varijable
set.seed(123)
# Broj doktora
num_doctors <- 32
# Distribucija pacijenata po kategorijama
patient_categories <- c("Crveni", "Žuti", "Zeleni", "Plavi")
category_probs <- c(0.05, 0.20, 0.50, 0.25)  # Vjerojatnosti za svaku kategoriju
# Vrijeme trijaže (u minutama, eksponencijalna distribucija)
triage_time <- function() rexp(1, rate = 1/5)  # Prosječno 5 min
# Vrijeme obrade kod doktora po kategoriji (u minutama, eksponencijalna distribucija)
service_times <- list(
"Crveni" = function() rexp(1, rate = 1/30),  # Prosječno 30 min
"Žuti" = function() rexp(1, rate = 1/20),    # Prosječno 20 min
"Zeleni" = function() rexp(1, rate = 1/10),  # Prosječno 10 min
"Plavi" = function() rexp(1, rate = 1/5)     # Prosječno 5 min
)
# Funkcija koja generira indeks pacijenta s kategorijom
generate_patient_index <- function() {
sample(1:4, size = 1, prob = category_probs)  # 1 = Crveni, 2 = Žuti, 3 = Zeleni, 4 = Plavi
}
# Simulacija dolaska pacijenata (Poissonov proces)
arrival_rate <- function() rexp(1, rate = 1/(1440 / sample(350:550, 1)))  # 350-550 pacijenata dnevno
# Kreiranje okoline
hospital <- simmer("Hitni prijem")
# Proces pacijenta
patient_trajectory <- trajectory("Pacijent") %>%
seize("trijaža") %>%
timeout(triage_time) %>%
release("trijaža") %>%
set_attribute("category", function() generate_patient_index()) %>%
seize("doktor", priority = function(attrs) {
return(5 - attrs[["category"]])  # Crveni (1) ima prioritet 4, Plavi (4) ima prioritet 1
}) %>%
timeout(function(attrs) {
category <- attrs[["category"]]
return(service_times[[patient_categories[category]]]() )
}) %>%
release("doktor")
# Dodajemo resurse (trijaža i doktori)
hospital %>%
add_resource("trijaža", capacity = 3) %>%  # 3 trijažna radnika
add_resource("doktor", capacity = num_doctors) %>%  # 32 doktora
add_generator("Pacijent", patient_trajectory, arrival_rate)
# Pokrećemo simulaciju na 7 dana
hospital %>%
run(until = 7 * 1440) %>%
print()
library(simmer)
library(simmer.plot)
# Definiramo globalne varijable
set.seed(123)
# Broj doktora
num_doctors <- 32
# Distribucija pacijenata po kategorijama
patient_categories <- c("Crveni", "Žuti", "Zeleni", "Plavi")
category_probs <- c(0.05, 0.20, 0.50, 0.25)  # Vjerojatnosti za svaku kategoriju
# Vrijeme trijaže (u minutama, eksponencijalna distribucija)
triage_time <- function() rexp(1, rate = 1/5)  # Prosječno 5 min
# Vrijeme obrade kod doktora po kategoriji (u minutama, eksponencijalna distribucija)
service_times <- list(
"Crveni" = function() rexp(1, rate = 1/30),  # Prosječno 30 min
"Žuti" = function() rexp(1, rate = 1/20),    # Prosječno 20 min
"Zeleni" = function() rexp(1, rate = 1/10),  # Prosječno 10 min
"Plavi" = function() rexp(1, rate = 1/5)     # Prosječno 5 min
)
# Funkcija koja generira indeks pacijenta s kategorijom
generate_patient_index <- function() {
sample(1:4, size = 1, prob = category_probs)  # 1 = Crveni, 2 = Žuti, 3 = Zeleni, 4 = Plavi
}
# Simulacija dolaska pacijenata (Poissonov proces)
arrival_rate <- function() rexp(1, rate = 1/(1440 / sample(350:550, 1)))  # 350-550 pacijenata dnevno
# Kreiranje okoline
hospital <- simmer("Hitni prijem")
# Proces pacijenta
patient_trajectory <- trajectory("Pacijent") %>%
seize("trijaža") %>%
timeout(triage_time) %>%
release("trijaža") %>%
set_attribute("category", function() generate_patient_index()) %>%
seize("doktor", priority = function(attrs) {
category <- get_attribute(attrs, "category")  # Dohvaćanje atributa unutar funkcije
return(5 - category)  # Crveni (1) ima prioritet 4, Plavi (4) ima prioritet 1
}) %>%
timeout(function(attrs) {
category <- get_attribute(attrs, "category")  # Dohvaćanje kategorije pacijenta
return(service_times[[patient_categories[category]]]() )
}) %>%
release("doktor")
# Dodajemo resurse (trijaža i doktori)
hospital %>%
add_resource("trijaža", capacity = 3) %>%  # 3 trijažna radnika
add_resource("doktor", capacity = num_doctors) %>%  # 32 doktora
add_generator("Pacijent", patient_trajectory, arrival_rate)
# Pokrećemo simulaciju na 7 dana
hospital %>%
run(until = 7 * 1440) %>%
print()
library(simmer)
library(simmer.plot)
# Definiramo globalne varijable
set.seed(123)
# Broj doktora
num_doctors <- 32
# Distribucija pacijenata po kategorijama
patient_categories <- c("Crveni", "Žuti", "Zeleni", "Plavi")
category_probs <- c(0.05, 0.20, 0.50, 0.25)  # Vjerojatnosti za svaku kategoriju
# Vrijeme trijaže (u minutama, eksponencijalna distribucija)
triage_time <- function() rexp(1, rate = 1/5)  # Prosječno 5 min
# Vrijeme obrade kod doktora po kategoriji (u minutama, eksponencijalna distribucija)
service_times <- list(
"Crveni" = function() rexp(1, rate = 1/30),  # Prosječno 30 min
"Žuti" = function() rexp(1, rate = 1/20),    # Prosječno 20 min
"Zeleni" = function() rexp(1, rate = 1/10),  # Prosječno 10 min
"Plavi" = function() rexp(1, rate = 1/5)     # Prosječno 5 min
)
# Funkcija koja generira indeks pacijenta s kategorijom
generate_patient_index <- function() {
sample(1:4, size = 1, prob = category_probs)  # 1 = Crveni, 2 = Žuti, 3 = Zeleni, 4 = Plavi
}
# Simulacija dolaska pacijenata (Poissonov proces)
arrival_rate <- function() rexp(1, rate = 1/(1440 / sample(350:550, 1)))  # 350-550 pacijenata dnevno
# Kreiranje okoline
hospital <- simmer("Hitni prijem")
# Proces pacijenta
patient_trajectory <- trajectory("Pacijent") %>%
seize("trijaža") %>%
timeout(triage_time) %>%
release("trijaža") %>%
set_attribute("category", function() generate_patient_index()) %>%
seize("doktor", priority = function(attrs) {
return(5 - get_attribute(attrs, "category"))  # Sada vraća broj, ne funkciju
}) %>%
timeout(function(attrs) {
category <- get_attribute(attrs, "category")
return(service_times[[patient_categories[category]]]() )  # Sada vraća broj
}) %>%
release("doktor")
# Dodajemo resurse (trijaža i doktori)
hospital %>%
add_resource("trijaža", capacity = 3) %>%  # 3 trijažna radnika
add_resource("doktor", capacity = num_doctors) %>%  # 32 doktora
add_generator("Pacijent", patient_trajectory, arrival_rate)
# Pokrećemo simulaciju na 7 dana
hospital %>%
run(until = 7 * 1440) %>%
print()
library(simmer)
library(simmer.plot)
install.packages(c("simmer", "simmer.plot"))
library(simmer)
library(simmer.plot)
# Time(MINUTES) required to examine patients in triage
TRIAGE_TIME <- function() round(rnorm(1, mean = 7, sd = 4), 2)
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
# Time(MINUTES) required to examine patients in triage
TRIAGE_TIME <- function() round(rnorm(1, mean = 5, sd = 3), 2)
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
TRIAGE_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME <- function() round(rnorm(1, mean = 60, sd = 25), 2)
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME()
# Create a patient every 3 minutes
P_INTER <- function() round(rnorm(1, mean = 3, sd = 1.5), 1)
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
P_INTER()
# Time(MINUTES) required to help patients
HELPT_TIME <- function() round(rnorm(1, mean = 120, sd = 40), 1)
# Time(MINUTES) required to help patients
HELPT_TIME <- function() round(rnorm(1, mean = 120, sd = 40), 1
HELP_TIME()
HELP_TIME()
# Time(MINUTES) required to help patients
HELPT_TIME <- function() round(rnorm(1, mean = 120, sd = 40), 1)
HELP_TIME()
# Time(MINUTES) required to help patients
HELP_TIME <- function() round(rnorm(1, mean = 120, sd = 40), 1)
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
HELP_TIME()
# Patient categories
PATIENT_CATEGORY <- c("Red", "Yellow", "Green", "Blue")
# Probability distribution for each category
PROBABILITY_CATEGORY <- c(0.05, 0.20, 0.50, 0.25)
# Function to randomly assign a category after triage
ASSIGN_CATEGORY <- function() {
sample(PATIENT_CATEGORY, size = 1, PROB = category_probs)
}
print(ASSIGN_CATEGORY())
# Function to randomly assign a category after triage
ASSIGN_CATEGORY <- function() {
sample(PATIENT_CATEGORY, size = 1, prob = PROBABILITY_CATEGORY)
}
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
print(ASSIGN_CATEGORY())
